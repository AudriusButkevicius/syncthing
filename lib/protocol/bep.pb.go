// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/protocol/bep.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	messageTypeClusterConfig    MessageType = 0
	messageTypeIndex            MessageType = 1
	messageTypeIndexUpdate      MessageType = 2
	messageTypeRequest          MessageType = 3
	messageTypeResponse         MessageType = 4
	messageTypeDownloadProgress MessageType = 5
	messageTypePing             MessageType = 6
	messageTypeClose            MessageType = 7
)

var MessageType_name = map[int32]string{
	0: "CLUSTER_CONFIG",
	1: "INDEX",
	2: "INDEX_UPDATE",
	3: "REQUEST",
	4: "RESPONSE",
	5: "DOWNLOAD_PROGRESS",
	6: "PING",
	7: "CLOSE",
}

var MessageType_value = map[string]int32{
	"CLUSTER_CONFIG":    0,
	"INDEX":             1,
	"INDEX_UPDATE":      2,
	"REQUEST":           3,
	"RESPONSE":          4,
	"DOWNLOAD_PROGRESS": 5,
	"PING":              6,
	"CLOSE":             7,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{0}
}

type MessageCompression int32

const (
	MessageCompressionNone MessageCompression = 0
	MessageCompressionLZ4  MessageCompression = 1
)

var MessageCompression_name = map[int32]string{
	0: "NONE",
	1: "LZ4",
}

var MessageCompression_value = map[string]int32{
	"NONE": 0,
	"LZ4":  1,
}

func (x MessageCompression) String() string {
	return proto.EnumName(MessageCompression_name, int32(x))
}

func (MessageCompression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{1}
}

type Compression int32

const (
	CompressMetadata Compression = 0
	CompressNever    Compression = 1
	CompressAlways   Compression = 2
)

var Compression_name = map[int32]string{
	0: "METADATA",
	1: "NEVER",
	2: "ALWAYS",
}

var Compression_value = map[string]int32{
	"METADATA": 0,
	"NEVER":    1,
	"ALWAYS":   2,
}

func (x Compression) String() string {
	return proto.EnumName(Compression_name, int32(x))
}

func (Compression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{2}
}

type FileInfoType int32

const (
	FileInfoTypeFile                       FileInfoType = 0
	FileInfoTypeDirectory                  FileInfoType = 1
	FileInfoTypeDeprecatedSymlinkFile      FileInfoType = 2 // Deprecated: Do not use.
	FileInfoTypeDeprecatedSymlinkDirectory FileInfoType = 3 // Deprecated: Do not use.
	FileInfoTypeSymlink                    FileInfoType = 4
)

var FileInfoType_name = map[int32]string{
	0: "FILE",
	1: "DIRECTORY",
	2: "SYMLINK_FILE",
	3: "SYMLINK_DIRECTORY",
	4: "SYMLINK",
}

var FileInfoType_value = map[string]int32{
	"FILE":              0,
	"DIRECTORY":         1,
	"SYMLINK_FILE":      2,
	"SYMLINK_DIRECTORY": 3,
	"SYMLINK":           4,
}

func (x FileInfoType) String() string {
	return proto.EnumName(FileInfoType_name, int32(x))
}

func (FileInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{3}
}

type ErrorCode int32

const (
	ErrorCodeNoError     ErrorCode = 0
	ErrorCodeGeneric     ErrorCode = 1
	ErrorCodeNoSuchFile  ErrorCode = 2
	ErrorCodeInvalidFile ErrorCode = 3
)

var ErrorCode_name = map[int32]string{
	0: "NO_ERROR",
	1: "GENERIC",
	2: "NO_SUCH_FILE",
	3: "INVALID_FILE",
}

var ErrorCode_value = map[string]int32{
	"NO_ERROR":     0,
	"GENERIC":      1,
	"NO_SUCH_FILE": 2,
	"INVALID_FILE": 3,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{4}
}

type FileDownloadProgressUpdateType int32

const (
	UpdateTypeAppend FileDownloadProgressUpdateType = 0
	UpdateTypeForget FileDownloadProgressUpdateType = 1
)

var FileDownloadProgressUpdateType_name = map[int32]string{
	0: "APPEND",
	1: "FORGET",
}

var FileDownloadProgressUpdateType_value = map[string]int32{
	"APPEND": 0,
	"FORGET": 1,
}

func (x FileDownloadProgressUpdateType) String() string {
	return proto.EnumName(FileDownloadProgressUpdateType_name, int32(x))
}

func (FileDownloadProgressUpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{5}
}

type Hello struct {
	DeviceName    string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"deviceName" xml:"deviceName"`
	ClientName    string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"clientName" xml:"clientName"`
	ClientVersion string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion,proto3" json:"clientVersion" xml:"clientVersion"`
}

func (m *Hello) Reset()         { *m = Hello{} }
func (m *Hello) String() string { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()    {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{0}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hello.Unmarshal(m, b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
}
func (m *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(m, src)
}
func (m *Hello) XXX_Size() int {
	return xxx_messageInfo_Hello.Size(m)
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

type Header struct {
	Type        MessageType        `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.MessageType" json:"type" xml:"type"`
	Compression MessageCompression `protobuf:"varint,2,opt,name=compression,proto3,enum=protocol.MessageCompression" json:"compression" xml:"compression"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{1}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type ClusterConfig struct {
	Folders []Folder `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders" xml:"folder"`
}

func (m *ClusterConfig) Reset()         { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()    {}
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{2}
}
func (m *ClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterConfig.Unmarshal(m, b)
}
func (m *ClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterConfig.Marshal(b, m, deterministic)
}
func (m *ClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConfig.Merge(m, src)
}
func (m *ClusterConfig) XXX_Size() int {
	return xxx_messageInfo_ClusterConfig.Size(m)
}
func (m *ClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConfig proto.InternalMessageInfo

type Folder struct {
	ID                 string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" xml:"id"`
	Label              string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label" xml:"label"`
	ReadOnly           bool     `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"readOnly" xml:"readOnly"`
	IgnorePermissions  bool     `protobuf:"varint,4,opt,name=ignore_permissions,json=ignorePermissions,proto3" json:"ignorePermissions" xml:"ignorePermissions"`
	IgnoreDelete       bool     `protobuf:"varint,5,opt,name=ignore_delete,json=ignoreDelete,proto3" json:"ignoreDelete" xml:"ignoreDelete"`
	DisableTempIndexes bool     `protobuf:"varint,6,opt,name=disable_temp_indexes,json=disableTempIndexes,proto3" json:"disableTempIndexes" xml:"disableTempIndexes"`
	Paused             bool     `protobuf:"varint,7,opt,name=paused,proto3" json:"paused" xml:"paused"`
	Devices            []Device `protobuf:"bytes,16,rep,name=devices,proto3" json:"devices" xml:"device"`
}

func (m *Folder) Reset()         { *m = Folder{} }
func (m *Folder) String() string { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()    {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{3}
}
func (m *Folder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Folder.Unmarshal(m, b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
}
func (m *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(m, src)
}
func (m *Folder) XXX_Size() int {
	return xxx_messageInfo_Folder.Size(m)
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

type Device struct {
	ID                       DeviceID    `protobuf:"bytes,1,opt,name=id,proto3,customtype=DeviceID" json:"id" xml:"id"`
	Name                     string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" xml:"name"`
	Addresses                []string    `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses" xml:"address"`
	Compression              Compression `protobuf:"varint,4,opt,name=compression,proto3,enum=protocol.Compression" json:"compression" xml:"compression"`
	CertName                 string      `protobuf:"bytes,5,opt,name=cert_name,json=certName,proto3" json:"certName" xml:"certName"`
	MaxSequence              int64       `protobuf:"varint,6,opt,name=max_sequence,json=maxSequence,proto3" json:"maxSequence" xml:"maxSequence"`
	Introducer               bool        `protobuf:"varint,7,opt,name=introducer,proto3" json:"introducer" xml:"introducer"`
	IndexID                  IndexID     `protobuf:"varint,8,opt,name=index_id,json=indexId,proto3,customtype=IndexID" json:"indexId" xml:"indexId"`
	SkipIntroductionRemovals bool        `protobuf:"varint,9,opt,name=skip_introduction_removals,json=skipIntroductionRemovals,proto3" json:"skipIntroductionRemovals" xml:"skipIntroductionRemovals"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{4}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

type Index struct {
	Folder string     `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder" xml:"folder"`
	Files  []FileInfo `protobuf:"bytes,2,rep,name=files,proto3" json:"files" xml:"file"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{5}
}
func (m *Index) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Index.Unmarshal(m, b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Index.Marshal(b, m, deterministic)
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return xxx_messageInfo_Index.Size(m)
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

type IndexUpdate struct {
	Folder string     `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder" xml:"folder"`
	Files  []FileInfo `protobuf:"bytes,2,rep,name=files,proto3" json:"files" xml:"file"`
}

func (m *IndexUpdate) Reset()         { *m = IndexUpdate{} }
func (m *IndexUpdate) String() string { return proto.CompactTextString(m) }
func (*IndexUpdate) ProtoMessage()    {}
func (*IndexUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{6}
}
func (m *IndexUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexUpdate.Unmarshal(m, b)
}
func (m *IndexUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexUpdate.Marshal(b, m, deterministic)
}
func (m *IndexUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUpdate.Merge(m, src)
}
func (m *IndexUpdate) XXX_Size() int {
	return xxx_messageInfo_IndexUpdate.Size(m)
}
func (m *IndexUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUpdate proto.InternalMessageInfo

type FileInfo struct {
	Name          string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name" xml:"name"`
	Size          int64        `protobuf:"varint,3,opt,name=size,proto3" json:"size" xml:"size"`
	ModifiedS     int64        `protobuf:"varint,5,opt,name=modified_s,json=modifiedS,proto3" json:"modifiedS" xml:"modifiedS"`
	ModifiedBy    ShortID      `protobuf:"varint,12,opt,name=modified_by,json=modifiedBy,proto3,customtype=ShortID" json:"modifiedBy" xml:"modifiedBy"`
	Version       Vector       `protobuf:"bytes,9,opt,name=version,proto3" json:"version" xml:"version"`
	Sequence      int64        `protobuf:"varint,10,opt,name=sequence,proto3" json:"sequence" xml:"sequence"`
	Blocks        []BlockInfo  `protobuf:"bytes,16,rep,name=blocks,proto3" json:"blocks" xml:"block"`
	SymlinkTarget string       `protobuf:"bytes,17,opt,name=symlink_target,json=symlinkTarget,proto3" json:"symlinkTarget" xml:"symlinkTarget"`
	BlocksHash    []byte       `protobuf:"bytes,18,opt,name=blocks_hash,json=blocksHash,proto3" json:"blocksHash" xml:"blocksHash"`
	Type          FileInfoType `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.FileInfoType" json:"type" xml:"type"`
	Permissions   uint32       `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions" xml:"permissions"`
	ModifiedNs    int          `protobuf:"varint,11,opt,name=modified_ns,json=modifiedNs,proto3,casttype=int" json:"modifiedNs" xml:"modifiedNs"`
	RawBlockSize  int          `protobuf:"varint,13,opt,name=block_size,json=blockSize,proto3,casttype=int" json:"blockSize" xml:"blockSize"`
	// The local_flags fields stores flags that are relevant to the local
	// host only. It is not part of the protocol, doesn't get sent or
	// received (we make sure to zero it), nonetheless we need it on our
	// struct and to be able to serialize it to/from the database.
	LocalFlags uint32 `protobuf:"varint,1000,opt,name=local_flags,json=localFlags,proto3" json:"localFlags" xml:"localFlags"`
	// The version_hash is an implementation detail and not part of the wire
	// format.
	VersionHash   []byte `protobuf:"bytes,1001,opt,name=version_hash,json=versionHash,proto3" json:"versionHash" xml:"versionHash"`
	Deleted       bool   `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted" xml:"deleted"`
	RawInvalid    bool   `protobuf:"varint,7,opt,name=invalid,proto3" json:"invalid" xml:"invalid"`
	NoPermissions bool   `protobuf:"varint,8,opt,name=no_permissions,json=noPermissions,proto3" json:"noPermissions" xml:"noPermissions"`
}

func (m *FileInfo) Reset()      { *m = FileInfo{} }
func (*FileInfo) ProtoMessage() {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{7}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

type BlockInfo struct {
	Hash     []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash" xml:"hash"`
	Offset   int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset" xml:"offset"`
	Size     int    `protobuf:"varint,2,opt,name=size,proto3,casttype=int" json:"size" xml:"size"`
	WeakHash uint32 `protobuf:"varint,4,opt,name=weak_hash,json=weakHash,proto3" json:"weakHash" xml:"weakHash"`
}

func (m *BlockInfo) Reset()      { *m = BlockInfo{} }
func (*BlockInfo) ProtoMessage() {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{8}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockInfo.Unmarshal(m, b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return xxx_messageInfo_BlockInfo.Size(m)
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

type Vector struct {
	Counters []Counter `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters" xml:"counter"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{9}
}
func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

type Counter struct {
	ID    ShortID `protobuf:"varint,1,opt,name=id,proto3,customtype=ShortID" json:"id" xml:"id"`
	Value uint64  `protobuf:"varint,2,opt,name=value,proto3" json:"value" xml:"value"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{10}
}
func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

type Request struct {
	ID            int    `protobuf:"varint,1,opt,name=id,proto3,casttype=int" json:"id" xml:"id"`
	Folder        string `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder" xml:"folder"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" xml:"name"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset" xml:"offset"`
	Size          int    `protobuf:"varint,5,opt,name=size,proto3,casttype=int" json:"size" xml:"size"`
	Hash          []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash" xml:"hash"`
	FromTemporary bool   `protobuf:"varint,7,opt,name=from_temporary,json=fromTemporary,proto3" json:"fromTemporary" xml:"fromTemporary"`
	WeakHash      uint32 `protobuf:"varint,8,opt,name=weak_hash,json=weakHash,proto3" json:"weakHash" xml:"weakHash"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{11}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Response struct {
	ID   int       `protobuf:"varint,1,opt,name=id,proto3,casttype=int" json:"id" xml:"id"`
	Data []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data" xml:"data"`
	Code ErrorCode `protobuf:"varint,3,opt,name=code,proto3,enum=protocol.ErrorCode" json:"code" xml:"code"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{12}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type DownloadProgress struct {
	Folder  string                       `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder" xml:"folder"`
	Updates []FileDownloadProgressUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates" xml:"update"`
}

func (m *DownloadProgress) Reset()         { *m = DownloadProgress{} }
func (m *DownloadProgress) String() string { return proto.CompactTextString(m) }
func (*DownloadProgress) ProtoMessage()    {}
func (*DownloadProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{13}
}
func (m *DownloadProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadProgress.Unmarshal(m, b)
}
func (m *DownloadProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadProgress.Marshal(b, m, deterministic)
}
func (m *DownloadProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadProgress.Merge(m, src)
}
func (m *DownloadProgress) XXX_Size() int {
	return xxx_messageInfo_DownloadProgress.Size(m)
}
func (m *DownloadProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadProgress.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadProgress proto.InternalMessageInfo

type FileDownloadProgressUpdate struct {
	UpdateType   FileDownloadProgressUpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=protocol.FileDownloadProgressUpdateType" json:"updateType" xml:"updateType"`
	Name         string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name" xml:"name"`
	Version      Vector                         `protobuf:"bytes,3,opt,name=version,proto3" json:"version" xml:"version"`
	BlockIndexes []int                          `protobuf:"varint,4,rep,name=block_indexes,json=blockIndexes,proto3,casttype=int" json:"blockIndexes" xml:"blockIndexe"`
	BlockSize    int                            `protobuf:"varint,5,opt,name=block_size,json=blockSize,proto3,casttype=int" json:"blockSize" xml:"blockSize"`
}

func (m *FileDownloadProgressUpdate) Reset()         { *m = FileDownloadProgressUpdate{} }
func (m *FileDownloadProgressUpdate) String() string { return proto.CompactTextString(m) }
func (*FileDownloadProgressUpdate) ProtoMessage()    {}
func (*FileDownloadProgressUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{14}
}
func (m *FileDownloadProgressUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileDownloadProgressUpdate.Unmarshal(m, b)
}
func (m *FileDownloadProgressUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileDownloadProgressUpdate.Marshal(b, m, deterministic)
}
func (m *FileDownloadProgressUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDownloadProgressUpdate.Merge(m, src)
}
func (m *FileDownloadProgressUpdate) XXX_Size() int {
	return xxx_messageInfo_FileDownloadProgressUpdate.Size(m)
}
func (m *FileDownloadProgressUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDownloadProgressUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_FileDownloadProgressUpdate proto.InternalMessageInfo

type Ping struct {
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{15}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type Close struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason" xml:"reason"`
}

func (m *Close) Reset()         { *m = Close{} }
func (m *Close) String() string { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()    {}
func (*Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_311ef540e10d9705, []int{16}
}
func (m *Close) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Close.Unmarshal(m, b)
}
func (m *Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Close.Marshal(b, m, deterministic)
}
func (m *Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Close.Merge(m, src)
}
func (m *Close) XXX_Size() int {
	return xxx_messageInfo_Close.Size(m)
}
func (m *Close) XXX_DiscardUnknown() {
	xxx_messageInfo_Close.DiscardUnknown(m)
}

var xxx_messageInfo_Close proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protocol.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("protocol.MessageCompression", MessageCompression_name, MessageCompression_value)
	proto.RegisterEnum("protocol.Compression", Compression_name, Compression_value)
	proto.RegisterEnum("protocol.FileInfoType", FileInfoType_name, FileInfoType_value)
	proto.RegisterEnum("protocol.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("protocol.FileDownloadProgressUpdateType", FileDownloadProgressUpdateType_name, FileDownloadProgressUpdateType_value)
	proto.RegisterType((*Hello)(nil), "protocol.Hello")
	proto.RegisterType((*Header)(nil), "protocol.Header")
	proto.RegisterType((*ClusterConfig)(nil), "protocol.ClusterConfig")
	proto.RegisterType((*Folder)(nil), "protocol.Folder")
	proto.RegisterType((*Device)(nil), "protocol.Device")
	proto.RegisterType((*Index)(nil), "protocol.Index")
	proto.RegisterType((*IndexUpdate)(nil), "protocol.IndexUpdate")
	proto.RegisterType((*FileInfo)(nil), "protocol.FileInfo")
	proto.RegisterType((*BlockInfo)(nil), "protocol.BlockInfo")
	proto.RegisterType((*Vector)(nil), "protocol.Vector")
	proto.RegisterType((*Counter)(nil), "protocol.Counter")
	proto.RegisterType((*Request)(nil), "protocol.Request")
	proto.RegisterType((*Response)(nil), "protocol.Response")
	proto.RegisterType((*DownloadProgress)(nil), "protocol.DownloadProgress")
	proto.RegisterType((*FileDownloadProgressUpdate)(nil), "protocol.FileDownloadProgressUpdate")
	proto.RegisterType((*Ping)(nil), "protocol.Ping")
	proto.RegisterType((*Close)(nil), "protocol.Close")
}

func init() { proto.RegisterFile("lib/protocol/bep.proto", fileDescriptor_311ef540e10d9705) }

var fileDescriptor_311ef540e10d9705 = []byte{
	// 2445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x37, 0xa9, 0xa1, 0xa4, 0x50, 0xe3, 0xc4, 0x61, 0x19, 0x87, 0x4b, 0x4f, 0xdc, 0x58,
	0x51, 0x03, 0x39, 0x71, 0x03, 0xa7, 0xb5, 0x8b, 0x06, 0xfc, 0x92, 0xcc, 0x58, 0x26, 0x95, 0xa1,
	0xec, 0xd4, 0x46, 0x5b, 0x62, 0xc5, 0x1d, 0x49, 0x0b, 0x2f, 0x77, 0xd9, 0x5d, 0x4a, 0xb6, 0x82,
	0x9e, 0x7a, 0x2a, 0x78, 0xea, 0xb1, 0x17, 0x02, 0x41, 0x0f, 0xfd, 0x38, 0x16, 0xe8, 0xad, 0xff,
	0x40, 0x8e, 0x41, 0x4f, 0x45, 0x0f, 0x8b, 0x5a, 0xbe, 0xa4, 0x3c, 0xf2, 0x54, 0xf4, 0x50, 0x14,
	0xf3, 0x66, 0x76, 0x76, 0x29, 0xc5, 0xae, 0xdc, 0x1c, 0x7a, 0xdb, 0xf9, 0xbd, 0xdf, 0xbc, 0xf9,
	0xfa, 0xbd, 0x37, 0x6f, 0x48, 0x74, 0xd1, 0x32, 0x77, 0xaf, 0x0d, 0x5d, 0x67, 0xe4, 0xf4, 0x1d,
	0xeb, 0xda, 0x2e, 0x1b, 0xae, 0x43, 0x03, 0xe7, 0x02, 0xac, 0xf4, 0x96, 0xcb, 0x86, 0x8e, 0x27,
	0x38, 0xbb, 0x87, 0x7b, 0xd7, 0xf6, 0x9d, 0x7d, 0x07, 0x1a, 0xf0, 0x25, 0xe8, 0xe4, 0x24, 0x8e,
	0xd2, 0xb7, 0x99, 0x65, 0x39, 0xb8, 0x8e, 0xf2, 0x06, 0x3b, 0x32, 0xfb, 0xac, 0x67, 0xeb, 0x03,
	0x56, 0x8c, 0x57, 0xe2, 0xab, 0x0b, 0x35, 0x32, 0xf5, 0x35, 0x24, 0xe0, 0xb6, 0x3e, 0x60, 0x33,
	0x5f, 0x2b, 0x3c, 0x19, 0x58, 0x37, 0x49, 0x08, 0x11, 0x1a, 0xb1, 0x73, 0x27, 0x7d, 0xcb, 0x64,
	0xf6, 0x48, 0x38, 0x49, 0x84, 0x4e, 0x04, 0x3c, 0xe7, 0x24, 0x84, 0x08, 0x8d, 0xd8, 0x71, 0x07,
	0x2d, 0x4b, 0x27, 0x47, 0xcc, 0xf5, 0x4c, 0xc7, 0x2e, 0x26, 0xc1, 0xcf, 0xea, 0xd4, 0xd7, 0x96,
	0x84, 0xe5, 0xbe, 0x30, 0xcc, 0x7c, 0xed, 0x42, 0xc4, 0x95, 0x44, 0x09, 0x9d, 0x67, 0x91, 0x3f,
	0xc6, 0x51, 0xe6, 0x36, 0xd3, 0x0d, 0xe6, 0xe2, 0x2a, 0x4a, 0x8d, 0x8e, 0x87, 0x62, 0x79, 0xcb,
	0xd7, 0x5f, 0x5b, 0x0f, 0x76, 0x6b, 0xfd, 0x2e, 0xf3, 0x3c, 0x7d, 0x9f, 0xed, 0x1c, 0x0f, 0x59,
	0xed, 0xe2, 0xd4, 0xd7, 0x80, 0x36, 0xf3, 0x35, 0x04, 0xfe, 0x79, 0x83, 0x50, 0xc0, 0xb0, 0x81,
	0xf2, 0x7d, 0x67, 0x30, 0x74, 0x99, 0x07, 0x73, 0x4b, 0x80, 0xa7, 0x4b, 0x67, 0x3c, 0xd5, 0x43,
	0x4e, 0xed, 0xca, 0xd4, 0xd7, 0xa2, 0x9d, 0x66, 0xbe, 0xb6, 0x22, 0xe6, 0x1d, 0x62, 0x84, 0x46,
	0x19, 0xe4, 0xc7, 0x68, 0xa9, 0x6e, 0x1d, 0x7a, 0x23, 0xe6, 0xd6, 0x1d, 0x7b, 0xcf, 0xdc, 0xc7,
	0x77, 0x50, 0x76, 0xcf, 0xb1, 0x0c, 0xe6, 0x7a, 0xc5, 0x78, 0x25, 0xb9, 0x9a, 0xbf, 0x5e, 0x08,
	0x87, 0xdc, 0x00, 0x43, 0x4d, 0xfb, 0xc2, 0xd7, 0x62, 0x53, 0x5f, 0x0b, 0x88, 0x33, 0x5f, 0x5b,
	0x84, 0x61, 0x44, 0x9b, 0xd0, 0xc0, 0x40, 0xfe, 0x94, 0x42, 0x19, 0xd1, 0x09, 0xaf, 0xa2, 0x84,
	0x69, 0xc8, 0xe3, 0x2e, 0x9e, 0xf8, 0x5a, 0xa2, 0xd5, 0x98, 0xfa, 0x5a, 0xc2, 0x34, 0x66, 0xbe,
	0x96, 0x83, 0xde, 0xa6, 0x41, 0x68, 0xc2, 0x34, 0xf0, 0x3a, 0x4a, 0x5b, 0xfa, 0x2e, 0xb3, 0xe4,
	0xb1, 0x16, 0xa7, 0xbe, 0x26, 0x80, 0x99, 0xaf, 0xe5, 0x81, 0x09, 0x2d, 0x42, 0x05, 0x8a, 0x6f,
	0xa1, 0x05, 0x97, 0xe9, 0x46, 0xcf, 0xb1, 0xad, 0x63, 0x38, 0xc2, 0x5c, 0xad, 0x3c, 0xf5, 0xb5,
	0x1c, 0x07, 0x3b, 0xb6, 0x75, 0x3c, 0xf3, 0xb5, 0x65, 0xe8, 0x16, 0x00, 0x84, 0x2a, 0x1b, 0xee,
	0x21, 0x6c, 0xee, 0xdb, 0x8e, 0xcb, 0x7a, 0x43, 0xe6, 0x0e, 0x4c, 0xd8, 0x14, 0xaf, 0x98, 0x02,
	0x2f, 0xef, 0x4d, 0x7d, 0x6d, 0x45, 0x58, 0xb7, 0x43, 0xe3, 0xcc, 0xd7, 0x5e, 0x17, 0xf3, 0x3d,
	0x6d, 0x21, 0xf4, 0x2c, 0x1b, 0xdf, 0x41, 0x4b, 0x72, 0x00, 0x83, 0x59, 0x6c, 0xc4, 0x8a, 0x69,
	0xf0, 0xfd, 0xf6, 0xd4, 0xd7, 0x16, 0x85, 0xa1, 0x01, 0xf8, 0xcc, 0xd7, 0x70, 0xc4, 0xad, 0x00,
	0x09, 0x9d, 0xe3, 0x60, 0x03, 0xbd, 0x6a, 0x98, 0x9e, 0xbe, 0x6b, 0xb1, 0xde, 0x88, 0x0d, 0x86,
	0x3d, 0xd3, 0x36, 0xd8, 0x13, 0xe6, 0x15, 0x33, 0xe0, 0xf3, 0xfa, 0xd4, 0xd7, 0xb0, 0xb4, 0xef,
	0xb0, 0xc1, 0xb0, 0x25, 0xac, 0x33, 0x5f, 0x2b, 0x8a, 0x68, 0x3a, 0x63, 0x22, 0xf4, 0x6b, 0xf8,
	0xf8, 0x3a, 0xca, 0x0c, 0xf5, 0x43, 0x8f, 0x19, 0xc5, 0x2c, 0xf8, 0x2d, 0x4d, 0x7d, 0x4d, 0x22,
	0xea, 0xa8, 0x45, 0x93, 0x50, 0x89, 0x73, 0xd9, 0x88, 0xf8, 0xf4, 0x8a, 0x85, 0xd3, 0xb2, 0x69,
	0x80, 0x21, 0x94, 0x8d, 0x24, 0x2a, 0x5f, 0xa2, 0x4d, 0x68, 0x60, 0x20, 0xbf, 0x4d, 0xa3, 0x8c,
	0xe8, 0x84, 0xbf, 0xa7, 0x64, 0xb3, 0x58, 0x5b, 0xe5, 0x0e, 0xfe, 0xe6, 0x6b, 0x39, 0x61, 0x6b,
	0x35, 0x5e, 0x28, 0xa3, 0x35, 0x94, 0x8a, 0x24, 0x07, 0x88, 0x35, 0x5b, 0xa4, 0x05, 0x11, 0x6b,
	0x36, 0x24, 0x04, 0xc0, 0xf0, 0x0f, 0xd0, 0x82, 0x6e, 0x18, 0x3c, 0x26, 0x98, 0x57, 0x4c, 0x56,
	0x92, 0xab, 0x0b, 0x20, 0xa1, 0x10, 0x9c, 0xf9, 0xda, 0x12, 0xf4, 0x92, 0x08, 0xa1, 0xa1, 0x0d,
	0xff, 0x64, 0x3e, 0x52, 0x53, 0xa7, 0x63, 0xfe, 0x9b, 0x85, 0x28, 0xd7, 0x77, 0x9f, 0xb9, 0x32,
	0xd5, 0xa5, 0x61, 0x35, 0xa0, 0x6f, 0x0e, 0xca, 0x44, 0x27, 0xf4, 0x1d, 0x00, 0x84, 0x2a, 0x1b,
	0xde, 0x44, 0x8b, 0x03, 0xfd, 0x49, 0xcf, 0x63, 0x3f, 0x3b, 0x64, 0x76, 0x9f, 0x81, 0x52, 0x92,
	0x62, 0x16, 0x03, 0xfd, 0x49, 0x57, 0xc2, 0x6a, 0x16, 0x11, 0x8c, 0xd0, 0x28, 0x03, 0xd7, 0x10,
	0x32, 0xed, 0x91, 0xeb, 0x18, 0x87, 0x7d, 0xe6, 0x4a, 0x61, 0x40, 0xc6, 0x0d, 0x51, 0x95, 0x71,
	0x43, 0x88, 0xd0, 0x88, 0x1d, 0x7f, 0x82, 0x72, 0xa0, 0xd8, 0x9e, 0x69, 0x14, 0x73, 0x95, 0xf8,
	0x6a, 0xaa, 0x76, 0x43, 0x1e, 0x69, 0x16, 0xb4, 0x07, 0x27, 0x1a, 0x7c, 0x72, 0xa5, 0x00, 0xbb,
	0x65, 0xa8, 0xdd, 0x97, 0x6d, 0x42, 0x03, 0x0b, 0xfe, 0x39, 0x2a, 0x79, 0x8f, 0x4c, 0x1e, 0x09,
	0x62, 0x94, 0x91, 0xe9, 0xd8, 0x3d, 0x97, 0x0d, 0x9c, 0x23, 0xdd, 0xf2, 0x8a, 0x0b, 0x30, 0xcd,
	0x1f, 0x4e, 0x7d, 0xad, 0xc8, 0x59, 0xad, 0x08, 0x89, 0x4a, 0xce, 0xcc, 0xd7, 0xca, 0xe0, 0xfb,
	0x79, 0x04, 0x42, 0x9f, 0xdb, 0x97, 0xfc, 0x22, 0x8e, 0xd2, 0x30, 0x5d, 0x1e, 0x33, 0x22, 0xe9,
	0xc9, 0x14, 0x07, 0x31, 0x23, 0x90, 0x33, 0xe9, 0x51, 0xe2, 0xb8, 0x89, 0xd2, 0x7b, 0xa6, 0xc5,
	0xbc, 0x62, 0x02, 0x22, 0x06, 0x47, 0x12, 0xad, 0x69, 0xb1, 0x96, 0xbd, 0xe7, 0xd4, 0xde, 0x90,
	0x31, 0x23, 0x88, 0x4a, 0xbb, 0xbc, 0x45, 0xa8, 0x00, 0xc9, 0x2f, 0xe3, 0x28, 0x0f, 0x93, 0xb8,
	0x37, 0x34, 0xf4, 0x11, 0xfb, 0x7f, 0x4e, 0xe5, 0x9f, 0x0b, 0x28, 0x17, 0x74, 0x50, 0x01, 0x18,
	0x3f, 0x47, 0x00, 0xae, 0xa1, 0x94, 0x67, 0x7e, 0xc6, 0x20, 0x7d, 0x27, 0x05, 0x97, 0xb7, 0x15,
	0x97, 0x37, 0x08, 0x05, 0x0c, 0x7f, 0x84, 0xd0, 0xc0, 0x31, 0xcc, 0x3d, 0x93, 0x19, 0x3d, 0x0f,
	0x02, 0x22, 0x59, 0xab, 0xf0, 0x68, 0x0d, 0xd0, 0xee, 0xcc, 0xd7, 0x5e, 0x11, 0x72, 0x0e, 0x10,
	0x42, 0x43, 0x2b, 0xa6, 0x28, 0xaf, 0x1c, 0xec, 0x1e, 0x17, 0x17, 0x41, 0x89, 0xef, 0x07, 0x4a,
	0xec, 0x1e, 0x38, 0xee, 0x08, 0xe4, 0xa7, 0x86, 0xa9, 0x1d, 0x2b, 0x69, 0x87, 0x10, 0xa1, 0x11,
	0x3b, 0xde, 0x42, 0xd9, 0xa0, 0x8a, 0xe0, 0xa2, 0x9b, 0xcb, 0x7f, 0xf7, 0x59, 0x7f, 0xe4, 0xb8,
	0xb5, 0x4a, 0x90, 0xff, 0x8e, 0x54, 0x55, 0x21, 0x54, 0x7d, 0x14, 0xd4, 0x13, 0x81, 0x05, 0xdf,
	0x44, 0x39, 0x15, 0xb1, 0x08, 0x16, 0x08, 0x11, 0xef, 0x85, 0xe1, 0x2a, 0x22, 0xde, 0x53, 0xb1,
	0xaa, 0x6c, 0xf8, 0x63, 0x94, 0xd9, 0xb5, 0x9c, 0xfe, 0xa3, 0x20, 0x11, 0x5f, 0x08, 0x27, 0x52,
	0xe3, 0x38, 0x1c, 0xe6, 0x9b, 0x72, 0x2e, 0x92, 0xaa, 0x6e, 0x56, 0x68, 0x12, 0x2a, 0x61, 0x5e,
	0x22, 0x79, 0xc7, 0x03, 0xcb, 0xb4, 0x1f, 0xf5, 0x46, 0xba, 0xbb, 0xcf, 0x46, 0xc5, 0x95, 0xb0,
	0x44, 0x92, 0x96, 0x1d, 0x30, 0xa8, 0x12, 0x69, 0x0e, 0x25, 0x74, 0x9e, 0xc5, 0x0b, 0x37, 0xe1,
	0xba, 0x77, 0xa0, 0x7b, 0x07, 0x45, 0x0c, 0x79, 0x1d, 0xd2, 0x88, 0x80, 0x6f, 0xeb, 0xde, 0x81,
	0xda, 0xeb, 0x10, 0x22, 0x34, 0x62, 0xc7, 0x35, 0x59, 0x5c, 0x89, 0x92, 0xe8, 0xe2, 0x59, 0xad,
	0x9e, 0xa3, 0xba, 0xda, 0x40, 0xf9, 0xd3, 0x17, 0xfe, 0x92, 0x48, 0x8b, 0xc3, 0xb9, 0xab, 0x5e,
	0xa4, 0xc5, 0x61, 0xf4, 0x92, 0x8f, 0x32, 0xf0, 0xc7, 0x11, 0x2d, 0xd9, 0x5e, 0x31, 0x5f, 0x89,
	0xaf, 0xa6, 0x6b, 0xef, 0x44, 0xc5, 0xd3, 0xf6, 0xce, 0x88, 0xa7, 0xed, 0x91, 0x7f, 0xf9, 0x5a,
	0xd2, 0xb4, 0x47, 0x34, 0x42, 0xc3, 0xf7, 0x91, 0x58, 0x65, 0x0f, 0x42, 0x61, 0x09, 0x5c, 0x7d,
	0x78, 0xe2, 0x6b, 0x8b, 0x54, 0x7f, 0x0c, 0x47, 0xd7, 0x35, 0x3f, 0x63, 0x5c, 0xe8, 0xbb, 0x41,
	0x43, 0x09, 0x5d, 0x21, 0xca, 0x71, 0x48, 0xc2, 0x0d, 0x94, 0xb7, 0x9c, 0xbe, 0x6e, 0xf5, 0xf6,
	0x2c, 0x7d, 0xdf, 0x2b, 0x7e, 0x95, 0x85, 0xc5, 0xc2, 0xae, 0x03, 0xbe, 0xc1, 0x61, 0x35, 0xc9,
	0x10, 0x22, 0x34, 0x62, 0xc7, 0xb7, 0xd1, 0xa2, 0x94, 0xa7, 0x38, 0xbb, 0x7f, 0x64, 0xe1, 0xf0,
	0x60, 0xcf, 0xa4, 0x41, 0x9e, 0xde, 0x4a, 0x54, 0xd5, 0xe2, 0xf8, 0xa2, 0x0c, 0x7c, 0x83, 0xd7,
	0x0a, 0xbc, 0x9e, 0x31, 0x64, 0xe1, 0x72, 0x49, 0x54, 0x05, 0x00, 0xa9, 0xa8, 0x90, 0x6d, 0x28,
	0x0b, 0xe0, 0x0b, 0x37, 0x50, 0xd6, 0xb4, 0x8f, 0x74, 0xcb, 0x0c, 0x0a, 0x93, 0xb5, 0x13, 0x5f,
	0x43, 0x54, 0x7f, 0xdc, 0x12, 0xa8, 0xb8, 0x31, 0xe0, 0x33, 0x72, 0x63, 0x40, 0x1b, 0x6e, 0x0c,
	0xf8, 0xe2, 0x9a, 0xb6, 0x9d, 0xb9, 0x6a, 0x2f, 0x07, 0xce, 0x40, 0xd3, 0xb6, 0x33, 0x5f, 0xe9,
	0x09, 0x4d, 0xcf, 0xa1, 0x84, 0xce, 0xb3, 0x6e, 0xa6, 0x7e, 0xfd, 0xb9, 0x16, 0x23, 0x4f, 0xe3,
	0x68, 0x41, 0xc5, 0x17, 0xcf, 0x67, 0xb0, 0x49, 0x49, 0xd8, 0x23, 0x90, 0xe2, 0x81, 0xd8, 0x1c,
	0x21, 0xc5, 0x03, 0xd8, 0x15, 0xc0, 0x78, 0xbe, 0x76, 0xf6, 0xf6, 0x3c, 0x36, 0x82, 0x4c, 0x99,
	0x14, 0xf9, 0x5a, 0x20, 0x2a, 0x5f, 0x8b, 0x26, 0xa1, 0x12, 0xc7, 0xef, 0xcb, 0x7c, 0x99, 0x00,
	0x91, 0xbc, 0xf9, 0xf5, 0xf9, 0x32, 0x90, 0x82, 0x48, 0x9b, 0xb7, 0xd0, 0xc2, 0x63, 0xa6, 0x3f,
	0x12, 0x87, 0x27, 0xf4, 0x0e, 0x49, 0x85, 0x83, 0xf2, 0xe0, 0x44, 0x52, 0x09, 0x00, 0x42, 0x95,
	0x4d, 0xae, 0xf1, 0x21, 0xca, 0x88, 0x5c, 0x86, 0xb7, 0x51, 0xae, 0xef, 0x1c, 0xda, 0xa3, 0xf0,
	0x99, 0xb0, 0x12, 0xad, 0x77, 0xc0, 0x52, 0xbb, 0x2c, 0x93, 0x8c, 0xa2, 0xaa, 0x53, 0x91, 0x00,
	0x2f, 0x54, 0xa4, 0x89, 0xb8, 0x28, 0x2b, 0xfb, 0xe1, 0x0f, 0x55, 0xcd, 0x97, 0xaa, 0x5d, 0x3d,
	0x95, 0x96, 0xff, 0xdb, 0xcb, 0xe1, 0x48, 0xb7, 0x0e, 0xc5, 0xb6, 0xa4, 0xc4, 0xcb, 0x01, 0x00,
	0x95, 0xdf, 0xa0, 0x45, 0xa8, 0x40, 0xc9, 0x9f, 0x93, 0x28, 0x4b, 0x79, 0xde, 0xf4, 0x46, 0xf8,
	0x9a, 0x1a, 0x34, 0x5d, 0xd3, 0x9e, 0x37, 0x4a, 0xb0, 0xa3, 0x7c, 0xb0, 0xf0, 0x9a, 0x4d, 0x9c,
	0xfb, 0x9a, 0x0d, 0xae, 0xc4, 0xe4, 0x39, 0xae, 0xc4, 0x50, 0x16, 0xa9, 0x97, 0x96, 0x45, 0xfa,
	0xfc, 0xb2, 0x08, 0x94, 0x9a, 0x39, 0x87, 0x52, 0x3b, 0x68, 0x79, 0xcf, 0x75, 0x06, 0xf0, 0xf6,
	0x70, 0x5c, 0xdd, 0x3d, 0x96, 0x71, 0x08, 0xa1, 0xc3, 0x2d, 0x3b, 0x81, 0x41, 0x85, 0xce, 0x1c,
	0x4a, 0xe8, 0x3c, 0x6b, 0x5e, 0x93, 0xb9, 0x97, 0xd3, 0x24, 0xf9, 0x7d, 0x1c, 0xe5, 0x28, 0xf3,
	0x86, 0x8e, 0xed, 0xb1, 0x97, 0x3f, 0xbe, 0x35, 0x94, 0x32, 0xf4, 0x91, 0x0e, 0x87, 0x27, 0xd7,
	0xcd, 0xdb, 0x6a, 0xdd, 0xbc, 0x41, 0x28, 0x60, 0xf8, 0x23, 0x94, 0xea, 0x3b, 0x86, 0x38, 0xb6,
	0xe5, 0xe8, 0x85, 0xda, 0x74, 0x5d, 0xc7, 0xad, 0x3b, 0x86, 0xbc, 0x6d, 0x38, 0x49, 0x39, 0xe0,
	0x0d, 0x42, 0x01, 0x23, 0xbf, 0x8b, 0xa3, 0x42, 0xc3, 0x79, 0x6c, 0x5b, 0x8e, 0x6e, 0x6c, 0xbb,
	0xce, 0x3e, 0x2f, 0xed, 0xff, 0xa7, 0x3a, 0xad, 0x87, 0xb2, 0x87, 0x50, 0xe5, 0x05, 0x95, 0xda,
	0x95, 0xf9, 0xdb, 0xef, 0xf4, 0x20, 0xa2, 0x24, 0x0c, 0x9f, 0x5e, 0xb2, 0xb3, 0xf2, 0x2f, 0xda,
	0x84, 0x06, 0x06, 0xf2, 0x9b, 0x24, 0x2a, 0x3d, 0xdf, 0x11, 0x1e, 0xa0, 0xbc, 0x60, 0xf6, 0x22,
	0x3f, 0x6f, 0xac, 0x9e, 0x67, 0x0e, 0x70, 0x27, 0xc3, 0x9d, 0x73, 0xa8, 0xda, 0xea, 0xce, 0x09,
	0x21, 0x42, 0x23, 0xf6, 0x97, 0x7a, 0xc3, 0x45, 0x2a, 0xb0, 0xe4, 0x37, 0xaf, 0xc0, 0xba, 0x68,
	0x49, 0xdc, 0xc5, 0xc1, 0x13, 0x3b, 0x55, 0x49, 0xae, 0xa6, 0x6b, 0xeb, 0xfc, 0xd9, 0xbe, 0x2b,
	0xd2, 0x7c, 0xf0, 0xb8, 0x5e, 0x09, 0x6f, 0x60, 0x01, 0x06, 0x3a, 0x2b, 0xc4, 0xe8, 0x1c, 0x17,
	0x6f, 0xcc, 0x5d, 0xf0, 0x22, 0x48, 0xaf, 0xbe, 0xfc, 0x85, 0x4e, 0x32, 0x28, 0xb5, 0x6d, 0xda,
	0xfb, 0xe4, 0x16, 0x4a, 0xd7, 0x2d, 0xc7, 0x83, 0x5c, 0xe1, 0x32, 0xdd, 0x73, 0xec, 0xa8, 0x94,
	0x04, 0xa2, 0x8e, 0x5a, 0x34, 0x09, 0x95, 0xf8, 0xda, 0x5f, 0x12, 0x28, 0x1f, 0xf9, 0x35, 0x0a,
	0xbf, 0x87, 0x96, 0xeb, 0x5b, 0xf7, 0xba, 0x3b, 0x4d, 0xda, 0xab, 0x77, 0xda, 0x1b, 0xad, 0xcd,
	0x42, 0xac, 0x74, 0x69, 0x3c, 0xa9, 0x14, 0x07, 0x21, 0x69, 0xfe, 0xa7, 0x22, 0x0d, 0xa5, 0x5b,
	0xed, 0x46, 0xf3, 0x47, 0x85, 0x78, 0xe9, 0xd5, 0xf1, 0xa4, 0x52, 0x88, 0x10, 0xc5, 0xa3, 0xe8,
	0x5d, 0xb4, 0x08, 0x84, 0xde, 0xbd, 0xed, 0x46, 0x75, 0xa7, 0x59, 0x48, 0x94, 0x4a, 0xe3, 0x49,
	0xe5, 0xe2, 0x69, 0x9e, 0xd4, 0xd6, 0x5b, 0x28, 0x4b, 0x9b, 0x9f, 0xdc, 0x6b, 0x76, 0x77, 0x0a,
	0xc9, 0xd2, 0xc5, 0xf1, 0xa4, 0x82, 0x23, 0xc4, 0x20, 0x4d, 0x7f, 0x1b, 0xe5, 0x68, 0xb3, 0xbb,
	0xdd, 0x69, 0x77, 0x9b, 0x85, 0x54, 0xe9, 0xf5, 0xf1, 0xa4, 0x72, 0x61, 0x8e, 0x25, 0xd3, 0xc1,
	0x0d, 0xb4, 0xd2, 0xe8, 0x7c, 0xda, 0xde, 0xea, 0x54, 0x1b, 0xbd, 0x6d, 0xda, 0xd9, 0xa4, 0xcd,
	0x6e, 0xb7, 0x90, 0x2e, 0x69, 0xe3, 0x49, 0xe5, 0x8d, 0x08, 0xff, 0x4c, 0x4c, 0xbe, 0x89, 0x52,
	0xdb, 0xad, 0xf6, 0x66, 0x21, 0x53, 0xba, 0x30, 0x9e, 0x54, 0x5e, 0x89, 0x50, 0xf9, 0x86, 0xf3,
	0x15, 0xd7, 0xb7, 0x3a, 0xdd, 0x66, 0x21, 0x7b, 0x66, 0xc5, 0x70, 0x10, 0x6b, 0x3f, 0x45, 0xf8,
	0xec, 0xef, 0x72, 0xf8, 0x0a, 0x4a, 0xb5, 0x3b, 0xed, 0x66, 0x21, 0x26, 0xd6, 0x7f, 0x96, 0xd1,
	0x76, 0x6c, 0x86, 0x09, 0x4a, 0x6e, 0x3d, 0xfc, 0xa0, 0x10, 0x2f, 0x7d, 0x6b, 0x3c, 0xa9, 0xbc,
	0x76, 0x96, 0xb4, 0xf5, 0xf0, 0x83, 0x35, 0x07, 0xe5, 0xa3, 0x8e, 0x09, 0xca, 0xdd, 0x6d, 0xee,
	0x54, 0x1b, 0xd5, 0x9d, 0x6a, 0x21, 0x26, 0xa6, 0x14, 0x98, 0xef, 0xb2, 0x91, 0x0e, 0xc9, 0xeb,
	0x12, 0x4a, 0xb7, 0x9b, 0xf7, 0x9b, 0xb4, 0x10, 0x2f, 0xad, 0x8c, 0x27, 0x95, 0xa5, 0x80, 0xd0,
	0x66, 0x47, 0xcc, 0xc5, 0x65, 0x94, 0xa9, 0x6e, 0x7d, 0x5a, 0x7d, 0xd0, 0x2d, 0x24, 0x4a, 0x78,
	0x3c, 0xa9, 0x2c, 0x07, 0xe6, 0xaa, 0xf5, 0x58, 0x3f, 0xf6, 0xd6, 0xfe, 0x1d, 0x47, 0x8b, 0xd1,
	0xb2, 0x1a, 0x97, 0x51, 0x6a, 0xa3, 0xb5, 0xd5, 0x0c, 0x86, 0x8b, 0xda, 0xf8, 0x37, 0x5e, 0x45,
	0x0b, 0x8d, 0x16, 0x6d, 0xd6, 0x77, 0x3a, 0xf4, 0x41, 0xb0, 0x96, 0x28, 0xa9, 0x61, 0xba, 0x10,
	0x8c, 0xc7, 0xf8, 0xfb, 0x68, 0xb1, 0xfb, 0xe0, 0xee, 0x56, 0xab, 0x7d, 0xa7, 0x07, 0x1e, 0x13,
	0xa5, 0xab, 0xe3, 0x49, 0xe5, 0xf2, 0x1c, 0x99, 0x0d, 0x5d, 0xd6, 0xd7, 0x47, 0xcc, 0xe8, 0x8a,
	0x67, 0x04, 0x37, 0xe6, 0xe2, 0xb8, 0x8e, 0x56, 0x82, 0xae, 0xe1, 0x60, 0xc9, 0xd2, 0xbb, 0xe3,
	0x49, 0xe5, 0xed, 0x17, 0xf6, 0x57, 0xa3, 0xe7, 0xe2, 0xf8, 0x0a, 0xca, 0x4a, 0x27, 0x81, 0x92,
	0xa2, 0x5d, 0x65, 0x87, 0xb5, 0x3f, 0xc4, 0xd1, 0x82, 0x4a, 0xf3, 0x7c, 0xc3, 0xdb, 0x9d, 0x5e,
	0x93, 0xd2, 0x0e, 0x0d, 0x76, 0x40, 0x19, 0xdb, 0x0e, 0x7c, 0xe2, 0xcb, 0x28, 0xbb, 0xd9, 0x6c,
	0x37, 0x69, 0xab, 0x1e, 0x04, 0x86, 0xa2, 0x6c, 0x32, 0x9b, 0xb9, 0x66, 0x1f, 0xbf, 0x83, 0x16,
	0xdb, 0x9d, 0x5e, 0xf7, 0x5e, 0xfd, 0x76, 0xb0, 0x74, 0x18, 0x3f, 0xe2, 0xaa, 0x7b, 0xd8, 0x3f,
	0x80, 0xfd, 0x5c, 0xe3, 0x31, 0x74, 0xbf, 0xba, 0xd5, 0x6a, 0x08, 0x6a, 0xb2, 0x54, 0x1c, 0x4f,
	0x2a, 0xaf, 0x2a, 0xaa, 0xac, 0x7d, 0x39, 0x77, 0xcd, 0x40, 0xe5, 0x17, 0x27, 0x60, 0x5c, 0x41,
	0x99, 0xea, 0xf6, 0x76, 0xb3, 0xdd, 0x08, 0x66, 0x1f, 0xda, 0xaa, 0xc3, 0x21, 0xb3, 0x0d, 0xce,
	0xd8, 0xe8, 0xd0, 0xcd, 0xe6, 0x4e, 0x30, 0xf9, 0x90, 0xb1, 0xe1, 0xf0, 0x37, 0x5c, 0xed, 0xee,
	0x17, 0x4f, 0xcb, 0xb1, 0x2f, 0x9f, 0x96, 0x63, 0x7f, 0x3f, 0x29, 0xc7, 0xbe, 0x3a, 0x29, 0xc7,
	0x7f, 0xf5, 0xac, 0x1c, 0xfb, 0xfc, 0x59, 0x39, 0xfe, 0xe5, 0xb3, 0x72, 0xec, 0xaf, 0xcf, 0xca,
	0xb1, 0x87, 0xdf, 0xd9, 0x37, 0x47, 0x07, 0x87, 0xbb, 0xeb, 0x7d, 0x67, 0x70, 0xcd, 0x3b, 0xb6,
	0xfb, 0xa3, 0x03, 0xd3, 0xde, 0x8f, 0x7c, 0x45, 0xff, 0x53, 0xd8, 0xcd, 0xc0, 0xd7, 0x77, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x23, 0x97, 0xd1, 0x6a, 0x18, 0x00, 0x00,
}

func (m *Hello) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	return n
}

func (m *Header) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBep(uint64(m.Type))
	}
	if m.Compression != 0 {
		n += 1 + sovBep(uint64(m.Compression))
	}
	return n
}

func (m *ClusterConfig) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Folders) > 0 {
		for _, e := range m.Folders {
			l = e.ProtoSize()
			n += 1 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *Folder) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.ReadOnly {
		n += 2
	}
	if m.IgnorePermissions {
		n += 2
	}
	if m.IgnoreDelete {
		n += 2
	}
	if m.DisableTempIndexes {
		n += 2
	}
	if m.Paused {
		n += 2
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.ProtoSize()
			n += 2 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *Device) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.ProtoSize()
	n += 1 + l + sovBep(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovBep(uint64(l))
		}
	}
	if m.Compression != 0 {
		n += 1 + sovBep(uint64(m.Compression))
	}
	l = len(m.CertName)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.MaxSequence != 0 {
		n += 1 + sovBep(uint64(m.MaxSequence))
	}
	if m.Introducer {
		n += 2
	}
	if m.IndexID != 0 {
		n += 1 + sovBep(uint64(m.IndexID))
	}
	if m.SkipIntroductionRemovals {
		n += 2
	}
	return n
}

func (m *Index) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Folder)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.ProtoSize()
			n += 1 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *IndexUpdate) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Folder)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.ProtoSize()
			n += 1 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *FileInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.Size != 0 {
		n += 1 + sovBep(uint64(m.Size))
	}
	if m.ModifiedS != 0 {
		n += 1 + sovBep(uint64(m.ModifiedS))
	}
	if m.ModifiedBy != 0 {
		n += 1 + sovBep(uint64(m.ModifiedBy))
	}
	l = m.Version.ProtoSize()
	n += 1 + l + sovBep(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovBep(uint64(m.Sequence))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.ProtoSize()
			n += 2 + l + sovBep(uint64(l))
		}
	}
	l = len(m.SymlinkTarget)
	if l > 0 {
		n += 2 + l + sovBep(uint64(l))
	}
	l = len(m.BlocksHash)
	if l > 0 {
		n += 2 + l + sovBep(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBep(uint64(m.Type))
	}
	if m.Permissions != 0 {
		n += 1 + sovBep(uint64(m.Permissions))
	}
	if m.ModifiedNs != 0 {
		n += 1 + sovBep(uint64(m.ModifiedNs))
	}
	if m.RawBlockSize != 0 {
		n += 1 + sovBep(uint64(m.RawBlockSize))
	}
	if m.LocalFlags != 0 {
		n += 2 + sovBep(uint64(m.LocalFlags))
	}
	l = len(m.VersionHash)
	if l > 0 {
		n += 2 + l + sovBep(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	if m.RawInvalid {
		n += 2
	}
	if m.NoPermissions {
		n += 2
	}
	return n
}

func (m *BlockInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovBep(uint64(m.Offset))
	}
	if m.Size != 0 {
		n += 1 + sovBep(uint64(m.Size))
	}
	if m.WeakHash != 0 {
		n += 1 + sovBep(uint64(m.WeakHash))
	}
	return n
}

func (m *Vector) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.ProtoSize()
			n += 1 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *Counter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBep(uint64(m.ID))
	}
	if m.Value != 0 {
		n += 1 + sovBep(uint64(m.Value))
	}
	return n
}

func (m *Request) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBep(uint64(m.ID))
	}
	l = len(m.Folder)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovBep(uint64(m.Offset))
	}
	if m.Size != 0 {
		n += 1 + sovBep(uint64(m.Size))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.FromTemporary {
		n += 2
	}
	if m.WeakHash != 0 {
		n += 1 + sovBep(uint64(m.WeakHash))
	}
	return n
}

func (m *Response) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBep(uint64(m.ID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovBep(uint64(m.Code))
	}
	return n
}

func (m *DownloadProgress) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Folder)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.ProtoSize()
			n += 1 + l + sovBep(uint64(l))
		}
	}
	return n
}

func (m *FileDownloadProgressUpdate) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateType != 0 {
		n += 1 + sovBep(uint64(m.UpdateType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	l = m.Version.ProtoSize()
	n += 1 + l + sovBep(uint64(l))
	if len(m.BlockIndexes) > 0 {
		for _, e := range m.BlockIndexes {
			n += 1 + sovBep(uint64(e))
		}
	}
	if m.BlockSize != 0 {
		n += 1 + sovBep(uint64(m.BlockSize))
	}
	return n
}

func (m *Ping) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Close) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovBep(uint64(l))
	}
	return n
}

func sovBep(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBep(x uint64) (n int) {
	return sovBep(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
